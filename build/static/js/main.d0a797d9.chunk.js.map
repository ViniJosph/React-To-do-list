{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","useState","tarefas","setTarefas","dados","setDados","length","ids","setIds","remover","id","filter","tarefa","className","onSubmit","event","preventDefault","novaTarefa","texto","addTarefa","onChange","target","value","placeholder","type","class","scope","linhas","forEach","push","key","onClick","renderTarefas","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yJAAAA,EAAOC,QAAU,IAA0B,kC,gHCmE5BC,G,YA/DH,WAAO,IAAD,EAEcC,mBAAS,IAFvB,mBAETC,EAFS,KAEAC,EAFA,OAGUF,mBAAS,IAHnB,mBAGTG,EAHS,KAGFC,EAHE,OAIMJ,mBAASC,EAAQI,QAJvB,mBAITC,EAJS,KAIJC,EAJI,KAiCVC,EAAU,SAACC,GACfP,EAAWD,EAAQS,QAAO,SAACC,GAAD,OAAYA,EAAOF,KAAOA,OAGtD,OACE,yBAAKG,UAAU,yBACb,0BAAMC,SAAU,SAACC,GAAD,OAbF,SAACA,GACjBA,EAAMC,iBACN,IAAIC,EAAa,CAAEP,GAAIH,EAAKW,MAAOd,GACnCI,EAAOD,EAAM,GACbJ,EAAW,GAAD,mBAAKD,GAAL,CAAce,KASKE,CAAUJ,KACnC,yBAAKF,UAAU,sCACb,2BAAOA,UAAU,kBAAjB,eACA,2BAAOA,UAAU,mBAAmBO,SAAU,SAACL,GAAD,OAAWV,EAASU,EAAMM,OAAOC,QAAQC,YAAY,sBACnG,4BAAQV,UAAU,sBAAsBW,KAAK,UAA7C,eAGJ,2BAAOC,MAAM,qBACX,+BACE,4BACE,wBAAIZ,UAAU,OAAOa,MAAM,OAA3B,KACA,wBAAIb,UAAU,iBAAiBa,MAAM,OAArC,WACA,wBAAIb,UAAU,OAAOa,MAAM,UAG/B,+BAhDgB,WAEpB,IAAIC,EAAS,GAeb,OAbAzB,EAAQ0B,SAAQ,SAAChB,GAAD,OACde,EAAOE,KACL,wBAAIC,IAAKlB,EAAOF,IACd,wBAAIgB,MAAM,OAAOd,EAAOF,GAAK,GAC7B,wBAAIG,UAAU,aACXD,EAAOM,OAEV,4BACE,4BAAQL,UAAU,iBAAiBkB,QAAS,kBAAMtB,EAAQG,EAAOF,MAAjE,iBAKDiB,EAgCAK,QC/CSC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.d0a797d9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","import React, { useState } from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\n\r\nconst App = () => {\r\n\r\n  const [tarefas, setTarefas] = useState([]);\r\n  const [dados, setDados] = useState(\"\");\r\n  const [ids, setIds] = useState(tarefas.length);\r\n\r\n  const renderTarefas = () => {\r\n\r\n    let linhas = [];\r\n\r\n    tarefas.forEach((tarefa) =>\r\n      linhas.push(\r\n        <tr key={tarefa.id}>\r\n          <th scope=\"row\">{tarefa.id + 1}</th>\r\n          <td className=\"text-left\">\r\n            {tarefa.texto}\r\n          </td>\r\n          <td>\r\n            <button className=\"btn btn-danger\" onClick={() => remover(tarefa.id)}>Remover</button>\r\n          </td>\r\n        </tr>\r\n      )\r\n    )\r\n    return linhas;\r\n  }\r\n\r\n  const addTarefa = (event) => {\r\n    event.preventDefault();\r\n    let novaTarefa = { id: ids, texto: dados };\r\n    setIds(ids + 1);\r\n    setTarefas([...tarefas, novaTarefa]);\r\n  };\r\n\r\n  const remover = (id) => {\r\n    setTarefas(tarefas.filter((tarefa) => tarefa.id !== id));\r\n  }\r\n\r\n  return (\r\n    <div className=\"container text-center\">\r\n      <form onSubmit={(event) => addTarefa(event)}>\r\n        <div className=\"form-inline justify-content-center\">\r\n          <label className=\"m-2 text-white\">Nova Tarefa</label>\r\n          <input className=\"form-control m-2\" onChange={(event) => setDados(event.target.value)} placeholder=\"Digite sua tarefa\" />\r\n          <button className=\"btn btn-primary m-2\" type=\"submit\">Adicionar</button>\r\n        </div>\r\n      </form>\r\n      <table class=\"table table-light\" >\r\n        <thead>\r\n          <tr>\r\n            <th className=\"w-25\" scope=\"col\">#</th>\r\n            <th className=\"w-50 text-left\" scope=\"col\">Tarefas</th>\r\n            <th className=\"w-25\" scope=\"col\"></th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {renderTarefas()}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}